- debug: msg="START - import_env.yml"

- name: Check for unseal temp file
  local_action: stat path="{{ tempdir }}/vault.txt"
  register: unseal_temp_file
  ignore_errors: yes

- name: Check for unseal keys temp file
  local_action: stat path="{{ tempdir }}/vault_unseal.txt"
  register: unseal_keys_temp_file
  ignore_errors: yes

- name: Check Vault Unsealed
  stat: path="{{ vault_config_path }}/unsealed"
  register: vault_unsealed
  ignore_errors: yes

- name: Check for vault token
  stat: path="{{ consul_config_path }}/tokens/vault"
  register: vault_token_file
  ignore_errors: yes

- name: Check for vault_tls_ca_bundle
  stat: path="{{ vault_config_path }}/tls/vault_tls_ca_bundle"
  register: stat_vault_tls_ca_bundle
  ignore_errors: yes

- name: Check for vault_server_tls_cert
  stat: path="{{ vault_config_path }}/tls/vault_server_tls_cert"
  register: stat_vault_server_tls_cert
  ignore_errors: yes

- name: Check for vault_server_tls_key
  stat: path="{{ vault_config_path }}/tls/vault_server_tls_key"
  register: stat_vault_server_tls_key
  ignore_errors: yes

- name: Fetch client Vault token from parameter store
  shell: "aws ssm get-parameter --output json --region {{ ansible_ec2_placement_region }} --with-decryption --name consul-{{ consul_join_tag_value }}-acl-vault | jq -r '.Parameter | .Value'"
  register: vault_agent_token
  until: vault_agent_token.stdout != ""
  retries: 120
  delay: 2
  ignore_errors: yes
  when: vault_token_file.stat.exists == false

- set_fact: vault_agent_token="{{ vault_agent_token.stdout }}"
  when: vault_token_file.stat.exists == false

- name: Set Operator Output
  set_fact: vault_agent_token="{{ lookup('file', vault_token_file.stat.path) }}"
  when: vault_token_file.stat.exists == true

- debug: msg="{{ vault_agent_token }}"

- debug: msg="END - import_env.yml"
