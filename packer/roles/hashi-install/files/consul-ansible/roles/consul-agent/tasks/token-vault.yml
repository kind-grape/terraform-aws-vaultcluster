- name: Write vault ACL policy for Vault
  set_fact:
    application_policy: |
      node_prefix "" {
        policy = "write"
      }
      service "vault" {
        policy = "write"
      }
      agent_prefix "" {
        policy = "write"
      }
      key_prefix "vault/" {
        policy = "write"
      }
      session_prefix "" {
        policy = "write"
      }

- name: Make vault ACL policy machine-readable
  set_fact:
    application_policy_api_value: "{{
      application_policy |
        regex_replace('\n', ' ') |
        regex_replace('\"', '\\\"') |
        regex_replace('\\s+', ' ')
    }}"
  when:
    - application_policy is defined

- name: Write vault ACL policy to Consul
  uri:
    body_format: json
    body: |
      {
        "Name": "{{ consul_application_policy_name }}",
        "Description": "Vault token",
        "Rules": "{{ application_policy_api_value }}"
      }
    method: PUT
    url: https://127.0.0.1:7501/v1/acl/policy
    headers:
      X-Consul-Token: "{{ consul_acl_master_token }}"
    validate_certs: no

- name: Create vault token
  uri:
    body_format: json
    body: |
      {
        "Description": "Vault token",
        "Policies": [{"Name": "{{ consul_application_policy_name }}"}],
        "Local": false
      }
    method: PUT
    url: https://127.0.0.1:7501/v1/acl/token
    headers:
      X-Consul-Token: "{{ consul_acl_master_token }}"
    validate_certs: no
    return_content: yes
  register: vault_token
  run_once: yes

- set_fact:
    vault_token: "{{ vault_token.json.SecretID }}"

- name: Show Vault Token - token-vault.yml
  debug:
    var: vault_token

- name: Archive ACL Vault token
  copy:
    content: "{{ vault_token }}"
    dest: /etc/consul.d/tokens/vault
    owner: consul
    group: consul
    mode: 0640

- name: Archive ACL Vault token to parameter store
  aws_ssm_parameter_store:
    string_type: "SecureString"
    name: "consul-{{ consul_join_tag_value }}-acl-vault"
    value: "{{ vault_token }}"
    description: "Consul Storage Server vault application ACL token"
    region: "{{ ansible_ec2_placement_region }}"
    overwrite_value: "always"
  run_once: yes
