- name: Gather instance metadata
  ec2_metadata_facts:

- name: Enable TLS if HTTPS port enabled
  set_fact:
    consul_tls_enabled: "{{ (consul_https_port != -1) | ternary(True, False) }}"

- name: Set API endpoint to HTTP or HTTPS
  set_fact:
    consul_api_protocol: "{{ consul_tls_enabled | ternary('https', 'http') }}"
    consul_api_port: "{{ consul_tls_enabled | ternary(consul_https_port, consul_http_port) }}"

- name: Install CA certificate
  copy:
    src: etc/consul.d/tls/consul-agent-ca.pem
    dest: /etc/consul.d/tls/consul-agent-ca.pem
    owner: consul
    group: consul
    mode: 0400
  with_items:
    - consul-agent-ca.pem

- name: Install client certificate and key
  copy:
    src: "etc/consul.d/tls/{{ item }}"
    dest: "/etc/consul.d/tls/{{ item }}"
    owner: consul
    group: consul
    mode: 0440
  with_items:
    - dc1-client-consul-0.pem
    - dc1-client-consul-0-key.pem

- name: Install server certificate and key
  copy:
    src: "etc/consul.d/tls/{{ item }}"
    dest: "/etc/consul.d/tls/{{ item }}"
    owner: consul
    group: consul
    mode: 0400
  with_items:
    - dc1-server-consul-0.pem
    - dc1-server-consul-0-key.pem

- name: Create protected directory for ACL tokens
  file:
    path: /etc/consul.d/tokens
    state: directory
    owner: consul
    group: consul
    mode: 0700

- name: Generate ACL master token
  command: "echo {{ ansible_date_time.iso8601_micro | to_uuid }}"
  register: consul_acl_master_token_keygen
  run_once: true

- name: Register ACL master token for Ansible plays
  set_fact:
    consul_acl_master_token: "{{ consul_acl_master_token_keygen.stdout }}"

- name: Archive ACL master token
  copy:
    content: "{{ consul_acl_master_token }}"
    dest: /etc/consul.d/tokens/master
    owner: consul
    group: consul
    mode: 0600

# TODO: Use consul-storage as service name
- name: Configure Consul agent
  template:
    src: etc/consul.d/consul.hcl.j2
    dest: '{{consul_config_path}}/consul.hcl'
    owner: '{{consul_user}}'
    group: '{{consul_group}}'
    mode: 0660

- name: Configure iptables
  iptables:
    chain: INPUT
    protocol: "{{ item.protocol }}"
    destination_port: "{{ item.destination_port }}"
    jump: ACCEPT
    ctstate: NEW
    action: append
    comment: "{{ item.comment }}"
  with_items:
    - { protocol: "tcp", destination_port: "{{ consul_server_rpc_port }}", comment: "Consul RPC traffic" }
    - { protocol: "tcp", destination_port: "{{ consul_serf_lan_port }}", comment: "Consul LAN Serf traffic" }
    - { protocol: "udp", destination_port: "{{ consul_serf_lan_port }}", comment: "Consul LAN Serf traffic" }
    - { protocol: "tcp", destination_port: "{{ consul_serf_wan_port }}", comment: "Consul WAN Serf traffic" }
    - { protocol: "udp", destination_port: "{{ consul_serf_wan_port }}", comment: "Consul WAN Serf traffic" }
    - { protocol: "tcp", destination_port: "{{ consul_http_port }}", comment: "Consul API HTTP traffic" }
    - { protocol: "tcp", destination_port: "{{ consul_https_port }}", comment: "Consul API HTTPS traffic" }
    - { protocol: "tcp", destination_port: "{{ consul_dns_port }}", comment: "Consul DNS Server traffic" }
    - { protocol: "udp", destination_port: "{{ consul_dns_port }}", comment: "Consul DNS Server traffic" }
  when:
    - item.destination_port != -1
  register: iptables

- name: Save iptables
  command: "service iptables save"
  args:
    warn: false
  when: iptables is changed

- name: Set Consul environment variables
  copy:
    dest: /etc/profile.d/99-consul-env.sh
    mode: 0644
    content: |
      export CONSUL_HTTP_ADDR={{ consul_api_protocol }}://127.0.0.1:{{ consul_api_port }}
      {% if consul_tls_enabled %}
      export CONSUL_CACERT=/etc/consul.d/tls/consul-agent-ca.pem
      export CONSUL_CLIENT_CERT=/etc/consul.d/tls/dc1-client-consul-0.pem
      export CONSUL_CLIENT_KEY=/etc/consul.d/tls/dc1-client-consul-0-key.pem
      {% endif %}

# TODO: use consul-storage as service name
- name: Start and enable Consul
  service: name=consul enabled=yes state=started

- name: Create agent, appliction ACL policies and tokens
  block:
  # Agent Policy and Token
  - name: Write Consul agent ACL policy
    set_fact:
      agent_policy: |
        agent_prefix "" {
          policy = "write"
        }

        node_prefix "" {
          policy = "write"
        }

        service_prefix "" {
          policy = "read"
        }

  - name: Make Consul agent ACL policy machine-readable
    set_fact:
      agent_policy_api_value: "{{
        agent_policy |
          regex_replace('\n', ' ') |
          regex_replace('\"', '\\\"') |
          regex_replace('\\s+', ' ')
      }}"

  - name: Write Consul agent ACL policy to Consul
    uri:
      body_format: json
      body: |
        {
          "Name": "{{ consul_agent_policy_name }}",
          "Description": "Consul agent token",
          "Rules": "{{ agent_policy_api_value }}"
        }
      method: PUT
      url: https://127.0.0.1:7501/v1/acl/policy
      headers:
        X-Consul-Token: "{{ consul_acl_master_token }}"
      validate_certs: no

  - name: Create agent token
    uri:
      body_format: json
      body: |
        {
          "Description": "Agent token",
          "Policies": [{"Name": "{{ consul_agent_policy_name }}"}],
          "Local": false
        }
      method: PUT
      url: https://127.0.0.1:7501/v1/acl/token
      headers:
        X-Consul-Token: "{{ consul_acl_master_token }}"
      validate_certs: no
      return_content: yes
    register: agent_token

  # Vault Policy and Token
  - name: Write application ACL policy for Vault
    set_fact:
      application_policy: |
        node_prefix "" {
          policy = "write"
        }

        service "vault" {
          policy = "write"
        }

        agent_prefix "" {
          policy = "write"
        }

        key_prefix "vault/" {
          policy = "write"
        }

        session_prefix "" {
          policy = "write"
        }

  - name: Make application ACL policy machine-readable
    set_fact:
      application_policy_api_value: "{{
        application_policy |
          regex_replace('\n', ' ') |
          regex_replace('\"', '\\\"') |
          regex_replace('\\s+', ' ')
      }}"

  - name: Write application ACL policy to Consul
    uri:
      body_format: json
      body: |
        {
          "Name": "{{ consul_application_policy_name }}",
          "Description": "Vault token",
          "Rules": "{{ application_policy_api_value }}"
        }
      method: PUT
      url: https://127.0.0.1:7501/v1/acl/policy
      headers:
        X-Consul-Token: "{{ consul_acl_master_token }}"
      validate_certs: no

  - name: Create application token
    uri:
      body_format: json
      body: |
        {
          "Description": "Vault token",
          "Policies": [{"Name": "{{ consul_application_policy_name }}"}],
          "Local": false
        }
      method: PUT
      url: https://127.0.0.1:7501/v1/acl/token
      headers:
        X-Consul-Token: "{{ consul_acl_master_token }}"
      validate_certs: no
      return_content: yes
    register: vault_token

  run_once: yes

- name: Replace ACL token placeholder in Consul config
  lineinfile:
    path: /etc/consul.d/consul.hcl
    regexp: "## AGENT_TOKEN_PLACEHOLDER ##"
    line: "    agent = \"{{ agent_token.json.SecretID }}\""

- name: Archive ACL agent token
  copy:
    content: "{{ agent_token.json.SecretID }}"
    dest: /etc/consul.d/tokens/agent
    owner: consul
    group: consul
    mode: 0600

- name: Archive ACL Vault token
  copy:
    content: "{{ vault_token.json.SecretID }}"
    dest: /etc/consul.d/tokens/vault
    owner: consul
    group: consul
    mode: 0600

- name: Restart Consul
  service: name=consul state=restarted

- debug:
    msg: |
      Consul cluster bootstrapped with TLS, gosip encryption and ACL policies.
      ACL master, agent and vault tokens written to /etc/consul.d/tokens. Keep
      tokens someplace safe with limited access, particularly the master token.
  run_once: yes
