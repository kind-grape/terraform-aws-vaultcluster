- name: Gather instance metadata
  ec2_metadata_facts:

- name: Set Location
  set_fact: location="{{ ansible_ec2_placement_region }}"

- name: Set Name
  set_fact: instance_id="{{ ansible_ec2_instance_id }}"

- name: Set Ip Address
  set_fact: local_ip_address="{{ ansible_ec2_local_ipv4 }}"

- name: Fetch master token from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-master-token | jq -r '.Parameter | .Value'"
  register: consul_master_token
  when:
    - master_token_file.stat.exists == false
    - consul_agent_is_server | bool

- name: Fetch Gossip Key from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-gossip-encryption-key | jq -r '.Parameter | .Value'"
  register: consul_encryption_key
  when: gossip_key_file.stat.exists == false

- name: Fetch client agent token from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-client-agent-token | jq -r '.Parameter | .Value'"
  register: client_agent_token
  when: agent_token_file.stat.exists == false

- name: Fetch vault token from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-vault-token | jq -r '.Parameter | .Value'"
  register: vault_token
  when: vault_token_file.stat.exists == false

- name: Fetch default token from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-default-token | jq -r '.Parameter | .Value'"
  register: default_token
  when: default_token_file.stat.exists == false

- name: Fetch snapshot token from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-snapshot-token | jq -r '.Parameter | .Value'"
  register: snapshot_token
  when: snapshot_token_file.stat.exists == false

- name: Fetch Root Cert from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-tls-ca-bundle | jq -r '.Parameter | .Value'"
  register: consul_tls_ca_bundle
  when:
    - stat_consul_tls_ca_bundle.stat.exists == false
    - consul_https_enabled | bool

- name: Fetch Client Cert from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-server-tls-cert | jq -r '.Parameter | .Value'"
  register: consul_client_tls_cert
  when:
    - stat_consul_client_tls_cert.stat.exists == false
    - consul_https_enabled | bool

- name: Fetch Client Cert Key from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-server-tls-key | jq -r '.Parameter | .Value'"
  register: consul_client_tls_key
  when:
    - stat_consul_client_tls_key.stat.exists == false
    - consul_https_enabled | bool

- name: Fetch Server Cert from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-client-tls-cert | jq -r '.Parameter | .Value'"
  register: consul_server_tls_cert
  when:
    - consul_agent_is_server | bool
    - stat_consul_server_tls_cert.stat.exists == false
    - consul_https_enabled | bool

- name: Fetch Server Cert Key from parameter store
  shell: "aws ssm get-parameter --output json --region {{ location }} --with-decryption --name consul-client-tls-key | jq -r '.Parameter | .Value'"
  register: consul_server_tls_key
  when:
    - consul_agent_is_server | bool
    - stat_consul_server_tls_key.stat.exists == false
    - consul_https_enabled | bool

- name: Write Tokens to File System
  import_tasks: token-write.yml

- name: Copying Certificates
  import_tasks: certs.yml
  when: consul_https_enabled | bool
